#!/usr/bin/env python3

# Copyright (C) 2021 Mike Gabriel <mike.gabriel@das-netzwerkteam.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import getopt
import os
import os.path
import sys
import socket

from hashlib import sha256

VERSION             = "0.2"
HOSTNAME            = socket.gethostname()

# actions
NONE                = 0
UNSILENCE           = 1
SILENCE             = 2
LIST                = 3
CHECK_ALL           = 4
REPORTLEVEL         = "server"
LOGCHECK_CONFIG_DIR = "/etc/logcheck"
LOGCHECK_CONFIG     = "{dir}/logcheck.conf".format(dir=LOGCHECK_CONFIG_DIR)
LOGCHECK_EXECUTABLE = "/usr/sbin/logcheck"
# ls -> logcheck-silencer
LS_CONFIG_DIR       = "/etc/logcheck-silencer"

reportlevels = ( 'workstation', 'server', 'paranoid', )

def usage(cmd, exitcode):
    print ("{cmd} ((-s <daemon>|-u <daemon>|-C)|-l) [-r <reportlevel>]".format(cmd=os.path.basename(cmd)))
    sys.exit(exitcode)

def pre_checks():
    if not os.path.isfile(LOGCHECK_EXECUTABLE):
        print ("ERROR:   'logcheck' command not found")
        sys.exit(3)
    if not os.path.isfile(LOGCHECK_CONFIG):
        print ("ERROR:   logcheck's main configuration file not found")
        sys.exit(4)
    if not os.path.isdir(LOGCHECK_CONFIG_DIR):
        print ("ERROR:   logcheck configuration directory not found")
        sys.exit(5)

def silence_daemon(daemon, reportlevel, force=False, report_updates_only=False):
    _ignore_dir = "{etc_logcheck}/ignore.d.{reportlevel}".format(etc_logcheck=LOGCHECK_CONFIG_DIR, reportlevel=reportlevel)
    if not force and \
        os.path.isdir(_ignore_dir) and \
        os.path.isfile("{ignore_dir}/{daemon}___silenced_by_logcheck-silencer".format(ignore_dir=_ignore_dir, daemon=daemon)):
        if not report_updates_only: print ("WARNING: Messages from '{daemon}' have already been silenced".format(daemon=daemon))
    else:
        specific_silencing_rules = []
        if not report_updates_only: print ("NOTE:    Silencing '{daemon}' messages in logcheck reports".format(daemon=daemon))
        if os.path.isfile('{lscfg_dir}/{daemon}.silence'.format(lscfg_dir=LS_CONFIG_DIR, daemon=daemon)):
            with open('{lscfg_dir}/{daemon}.silence'.format(lscfg_dir=LS_CONFIG_DIR, daemon=daemon)) as f:
                specific_silencing_rules = f.readlines()

        if os.path.isfile('{ignore_dir}/{daemon}___silenced_by_logcheck-silencer'.format(ignore_dir=_ignore_dir, daemon=daemon)):
            with open('{ignore_dir}/{daemon}___silenced_by_logcheck-silencer'.format(ignore_dir=_ignore_dir, daemon=daemon), 'rb') as f:
                checksum_previous = sha256(f.read()).hexdigest()
        else:
            checksum_previous = None

        with open('{ignore_dir}/{daemon}___silenced_by_logcheck-silencer'.format(ignore_dir=_ignore_dir, daemon=daemon), 'w') as f:
            f.write('# --- DO NOT MODIFY THIS FILE HERE ---\n')
            f.write('#\n')
            f.write('# Created by logcheck-silencer {version}\n'.format(version=VERSION))
            f.write('#\n')
            f.write('# You can unsilence \'{daemon}\' messages in logcheck reports by running:\n'.format(daemon=daemon))
            f.write('#\n')
            f.write('#   root@{hostname}:~ logcheck-silencer -u {daemon}\n'.format(hostname=HOSTNAME, daemon=daemon))
            f.write('#\n')
            if not specific_silencing_rules:
                f.write('^\w{3} [ :0-9]{11} [._[:alnum:]-]+ %s(\.service|)(/[a-zA-Z]+|)([[0-9]+\]|):.*\n' % daemon)
            else:
                print ("NOTE:    Using specific silencing rules as found in '{lscfg_dir}/{daemon}.silence'".format(lscfg_dir=LS_CONFIG_DIR, daemon=daemon))
                f.write('\n')
                f.write('# NOTE: You can adapt the part below in\n')
                f.write('# {lscfg_dir}/{daemon}.silence\n'.format(lscfg_dir=LS_CONFIG_DIR, daemon=daemon))
                f.write('#\n')
                for l in specific_silencing_rules:
                    f.write('{line}'.format(line=l))

        with open('{ignore_dir}/{daemon}___silenced_by_logcheck-silencer'.format(ignore_dir=_ignore_dir, daemon=daemon), 'rb') as f:
            checksum_next = sha256(f.read()).hexdigest()

        if checksum_previous is not None and checksum_next != checksum_previous:
            print ("INFO:    Updated outdated silencing ruleset for service '{daemon}'".format(daemon=daemon))


def unsilence_daemon(daemon, reportlevel):
    _ignore_dir = "{etc_logcheck}/ignore.d.{reportlevel}".format(etc_logcheck=LOGCHECK_CONFIG_DIR, reportlevel=reportlevel)
    if os.path.isfile("{ignore_dir}/{daemon}___silenced_by_logcheck-silencer".format(ignore_dir=_ignore_dir, daemon=daemon)):
        print ("Unsilencing '{daemon}' messages in logcheck reports".format(daemon=daemon))
        os.remove("{ignore_dir}/{daemon}___silenced_by_logcheck-silencer".format(ignore_dir=_ignore_dir, daemon=daemon))
    else:
        print ("WARNING: Messages from '{daemon}' have not been silented".format(daemon=daemon))

def list_silenced_daemons(reportlevel):
    _ignore_dir = "{etc_logcheck}/ignore.d.{reportlevel}".format(etc_logcheck=LOGCHECK_CONFIG_DIR, reportlevel=reportlevel)
    silenced = []
    if os.path.isdir(_ignore_dir):
        for root, dirs, files in os.walk(_ignore_dir):
            silenced.extend([ f.split('_')[0] for f in files if f.endswith('___silenced_by_logcheck-silencer') ])

    silenced.sort()
    return silenced

def main(cmd, argv):
    action = NONE
    reportlevel = REPORTLEVEL
    force = False
    pkgupdate = False

    try:
        opts, args = getopt.getopt(argv,"lChfs:u:r:",["silence=","unsilence=", "reportlevel=", "list", "check-all", "force", "pkgupdate", ])
    except getopt.GetoptError:
        usage(cmd, 2)
    for opt, arg in opts:
        if opt == '-h':
            usage(cmd, 0)
        elif opt in ("-s", "--silence", ):
            action = SILENCE
            daemon = arg
        elif opt in ("-f", "--force", ):
            force = True
        elif opt in ("-u", "--unsilence", ):
            action = UNSILENCE
            daemon = arg
        elif opt in ("-r", "--reportlevel", ):
            for rl in reportlevels:
                if rl.startswith(arg):
                    reportlevel = rl
        elif opt in ("-l", "--list", ):
            action = LIST
        elif opt in ("-C", "--check-all", ):
            action = CHECK_ALL
        elif opt in ("--pkgupdate",):
            pkgupdate = True

    if action == LIST:
        silenced = list_silenced_daemons(reportlevel)
        for s in silenced:
            print ("{daemon}".format(daemon=s))
        sys.exit(0)

    if action == CHECK_ALL:
        for reportlevel in reportlevels:
            silenced = list_silenced_daemons(reportlevel)
            for s in silenced:
                silence_daemon(s, reportlevel, force=True, report_updates_only=pkgupdate)
            if not pkgupdate:
                print ("NOTE:    Updated logcheck configuration for report level '{reportlevel}'".format(reportlevel=reportlevel))

    elif reportlevel and action == SILENCE:
        silence_daemon(daemon, reportlevel, force=force)
        print ("NOTE:    Updated logcheck configuration for report level '{reportlevel}'".format(reportlevel=reportlevel))

    elif reportlevel and action == UNSILENCE:
        unsilence_daemon(daemon, reportlevel)
        print ("NOTE:    Updated logcheck configuration for report level '{reportlevel}'".format(reportlevel=reportlevel))
    else:
        usage(cmd, 1)


if __name__ == "__main__":
   pre_checks()
   main(sys.argv[0], sys.argv[1:])
